{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/Tracklist/TrackList.js","Components/PlayList/PlayList.js","Components/SearchResults/SearchResults.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","event","console","log","this","onSearch","setState","target","value","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","id","PlayList","handleChangeName","onNameChange","defaultValue","playlistTracks","onSave","SearchResults","searchResults","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","arr","filter","foundTracks","class","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f606ce1e.chunk.js","sourcesContent":["const clientId = \"076bfa938e8a43058c088145bf7df7c5\";\r\nconst redirectUri = 'http://leon-jamming.surge.sh/'; // Have to add this to your accepted Spotify redirect URIs on the Spotify API.\r\n\r\nlet accessToken;\r\nconst Spotify = {\r\n\tgetAccessToken: () => {\r\n\t\tif (accessToken) {\r\n\t\t\treturn accessToken;\r\n\t\t}\r\n\t\tconst accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n\t\tconst expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\t\tif (accessTokenMatch && expiresInMatch) {\r\n\t\t\taccessToken = accessTokenMatch[1];\r\n\t\t\tconst expiresIn = Number(expiresInMatch[1]);\r\n\t\t\twindow.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n\t\t\twindow.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing us to grab a new access token when it expires.\r\n\t\t\treturn accessToken;\r\n\t\t} else {\r\n\t\t\tconst accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n\t\t\twindow.location = accessUrl;\r\n\t\t}\r\n\t},\r\n\tsearch(term) {\r\n\t\tconst accessToken = Spotify.getAccessToken();\r\n\t\treturn fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: `Bearer ${accessToken}`\r\n\t\t\t}\r\n\t\t}).then(response => {\r\n\t\t\treturn response.json();\r\n\t\t}).then(jsonResponse => {\r\n\t\t\tif (!jsonResponse.tracks) {\r\n\t\t\t\treturn [];\r\n\t\t\t}\r\n\t\t\treturn jsonResponse.tracks.items.map(track => ({\r\n\t\t\t\tid: track.id,\r\n\t\t\t\tname: track.name,\r\n\t\t\t\tartist: track.artists[0].name,\r\n\t\t\t\talbum: track.album.name,\r\n\t\t\t\turi: track.uri\r\n\t\t\t}));\r\n\t\t});\r\n\t},\r\n\tsavePlaylist(name, trackUris) {\r\n\t\tif (!name || !trackUris.length) {\r\n\t\t  return;\r\n\t\t}\r\n\t\r\n\t\tconst accessToken = Spotify.getAccessToken();\r\n\t\tconst headers = { Authorization: `Bearer ${accessToken}` };\r\n\t\tlet userId;\r\n\t\r\n\t\treturn fetch('https://api.spotify.com/v1/me', {headers: headers}\r\n\t\t).then(response => response.json()\r\n\t\t).then(jsonResponse => {\r\n\t\t  userId = jsonResponse.id;\r\n\t\t  return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n\t\t\theaders: headers,\r\n\t\t\tmethod: 'POST',\r\n\t\t\tbody: JSON.stringify({name: name})\r\n\t\t  }).then(response => response.json()\r\n\t\t  ).then(jsonResponse => {\r\n\t\t\tconst playlistId = jsonResponse.id;\r\n\t\t\treturn fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n\t\t\t  headers: headers,\r\n\t\t\t  method: 'POST',\r\n\t\t\t  body: JSON.stringify({uris: trackUris})\r\n\t\t\t});\r\n\t\t  });\r\n\t\t});\r\n\t  }\r\n};\r\n\r\nexport default Spotify;","import React from \"react\";\r\nimport \"./SearchBar.css\" ;\r\nexport class SearchBar extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            term : \"\"\r\n        }\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n\r\n    search(event){\r\n        console.log(this.state.term)\r\n        this.props.onSearch(this.state.term)\r\n    }\r\n    handleTermChange(event){\r\n        this.setState({term: event.target.value})\r\n        \r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n            <input onChange={this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\" />\r\n            <button onClick={this.search} className=\"SearchButton\">SEARCH</button>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n","\r\nimport React from \"react\";\r\nimport './Track.css';\r\nexport class Track extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n  }\r\n    renderAction(isRemoval){\r\n      if(isRemoval){\r\n        return <button className=\"Track-action\" onClick={this.removeTrack.bind(this)}>-</button>\r\n      }\r\n        return <button className=\"Track-action\" onClick={this.addTrack.bind(this)}>+</button>\r\n\r\n    \r\n    }\r\n    addTrack(event){\r\n      if(this.props.isRemoval){\r\n        return;\r\n      }\r\n      else{\r\n        this.props.onAdd(this.props.track)\r\n      }\r\n\r\n    }\r\n    removeTrack(event){\r\n      this.props.onRemove(this.props.track)\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Track\">\r\n            <div className=\"Track-information\">\r\n              <h3>{this.props.track.name}</h3>\r\n              <p>-{this.props.track.artist + \" - \" + this.props.track.album} </p>\r\n            </div>\r\n            {this.renderAction(this.props.isRemoval)}\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\n","\r\nimport React from \"react\";\r\nimport \"./TrackList.css\";\r\nimport {Track} from '../Track/Track';\r\nexport class TrackList extends React.Component {\r\n    constructor (props){\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"TrackList\">\r\n                {this.props.tracks.map((track)=>{\r\n                    return <Track key={track.id} track={track} onAdd={this.props.onAdd} onRemove={this.props.onRemove} isRemoval={this.props.isRemoval}/>;\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","\r\nimport React from \"react\";\r\nimport {TrackList} from '../Tracklist/TrackList';\r\nimport './PlayList.css';\r\nexport class PlayList extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.handleChangeName = this.handleChangeName.bind(this);\r\n    }\r\n    handleChangeName(event){\r\n        this.props.onNameChange(event.target.value);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Playlist\">\r\n            <input onChange={this.handleChangeName} defaultValue={'New Playlist'}/>\r\n            <TrackList tracks={this.props.playlistTracks} onRemove={this.props.onRemove} isRemoval={true}/> \r\n          \r\n            <button onClick={this.props.onSave} className=\"Playlist-save\">SAVE TO SPOTIFY</button>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {TrackList} from '../Tracklist/TrackList'\r\n\r\nexport class SearchResults extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"SearchResults\">\r\n            <h2>Results</h2>\r\n            <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false}/> \r\n          </div>\r\n        );\r\n    }\r\n}\r\n","\nimport './App.css';\nimport React from 'react';\nimport { SearchBar } from '../SearchBar/SearchBar';\nimport { PlayList } from '../PlayList/PlayList';\nimport { SearchResults } from '../SearchResults/SearchResults';\nimport Spotify from '../../util/Spotify';\n\nconst tracks = [\n\n  {\n    name: \"heyoyohe\",\n    artist: \"yumineers\",\n    album: \"hipsterShit\",\n    id: 2,\n  }\n]\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: \"New Playlist\",\n      playlistTracks: []\n    }\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n  addTrack(track) {\n    if (this.state.playlistTracks.find(savedTrack => \n      savedTrack.id === track.id\n    )) {\n      return;\n    }\n    else {\n      this.setState({playlistTracks: [...this.state.playlistTracks,track]})\n    }}\n\n  removeTrack(track){\n    let arr = this.state.playlistTracks.filter((savedTrack)=> {\n      return track.id != savedTrack.id;\n    })\n    this.setState({playlistTracks: arr});\n  }\n\n  updatePlaylistName(name){\n    this.setState({playlistName:name});\n  }\n\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      });\n    });\n  }\n  \n  search(term){\n    Spotify.search(term).then((foundTracks)=>{\n      this.setState({searchResults: foundTracks});\n    })\n    \n  }\n\n  \n  render() {\n    return (\n      <div>\n        <h1>Ja<span class=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack} />\n            <PlayList \n            playlistTracks={this.state.playlistTracks} \n            playlistName={this.state.playlistName} \n            onRemove={this.removeTrack} \n            onNameChange={this.updatePlaylistName} \n            onSave={this.savePlaylist}/>\n          </div>\n        </div>\n      </div>\n    );\n  };\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}